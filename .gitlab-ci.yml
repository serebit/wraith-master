image: registry.gitlab.com/serebit/wraith-master

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  GRADLE_USER_HOME: $CI_PROJECT_DIR/.gradle_home
  KONAN_DATA_DIR: $CI_PROJECT_DIR/.konan_home
  KONAN_DEPS_CACHE: $CI_PROJECT_DIR/.konan_deps
  KONAN_DEPS: "clang-llvm-8.0.0-linux-x86-64 libffi-3.2.1-2-linux-x86-64 target-gcc-toolchain-3-linux-x86-64 lldb-2-linux"

before_script:
  # invalidate Gradle caches if the Gradle version changed
  - if [[ ! -f gradle_checksum.txt || $(sha256sum /usr/bin/gradle) != $(cat gradle_checksum.txt) ]]; then
  - rm -rf $GRADLE_USER_HOME/caches/ .gradle/*.*/
  - fi
  - mkdir -p "$KONAN_DEPS_CACHE" "$KONAN_DATA_DIR/dependencies/"
  - for DEP in $KONAN_DEPS; do
  - if [ ! -f "$KONAN_DEPS_CACHE/$DEP.tar.gz" ]; then
  - wget -nv "https://download.jetbrains.com/kotlin/native/$DEP.tar.gz" -P "$KONAN_DEPS_CACHE"
  - fi
  - tar -xzf "$KONAN_DEPS_CACHE/$DEP.tar.gz" -C "$KONAN_DATA_DIR/dependencies/"
  - echo "$DEP" >>"$KONAN_DATA_DIR/dependencies/.extracted"
  - done

after_script:
  - rm -f "$GRADLE_USER_HOME/caches/**/"{*.lock,gc.properties}
  - find "$GRADLE_USER_HOME/caches/" -type d -empty -delete
  - sha256sum /usr/bin/gradle > gradle_checksum.txt

cache: &global_cache
  key: one-key-to-rule-them-all
  paths: # these are all either deps or necessary build metadata for quick rebuilds
    - $GRADLE_USER_HOME/caches/modules-*/{files,metadata}-*/
    - $GRADLE_USER_HOME/caches/*.*/{file-changes,fileHashes,generated-gradle-jars,gradle-kotlin-dsl,gradle-kotlin-dsl-accessors}/
    - $GRADLE_USER_HOME/caches/{build-cache,jars}-*/
    - $KONAN_DEPS_CACHE/
    - .gradle/{*.*,buildOutputCleanup}/
    - ./**/build/{classes,bin}/
    - gradle_checksum.txt
  policy: pull

build:
  stage: build
  script: gradle allTests
  cache:
    <<: *global_cache
    policy: pull-push

release-tar:
  stage: deploy
  dependencies: [ build ]
  when: manual
  only:
    refs: [ release ]
  script: gradle distTar
  cache:
    <<: *global_cache
  artifacts:
    paths: [ "build/dist/*.tar.*" ]

release-deb:
  stage: deploy
  dependencies: [ build ]
  when: manual
  only:
    refs: [ release ]
  script:
    - gradle install -Ppackageroot=$CI_PROJECT_DIR/build/debian/wraith-master
    - awk 'BEGIN{getline l < "build/package/resources/version.txt"}/localhost/{gsub("%VERSION%",l)}1' resources/debian-control.txt
    - install -D resources/debian-control.txt build/debian/wraith-master/DEBIAN/control
    - cd build/debian
    - dpkg-deb -b wraith-master
  cache:
    <<: *global_cache
  artifacts:
    paths: [ "build/debian/*.deb" ]
